//Bill.h
#pragma once
#include "time.h"
#include <string>
class Bill {
	std::string* surname;
	std::string* number_tel;
	double* rate_min;
	double* discount;
	Time* begin_talk;
	Time* end_talk;
	double* amount;
public:
	Bill();
	/// <summary>
	/// конструктор
	/// </summary>
	/// <param name="surname">фамилия</param>
	/// <param name="number_tel">номер телефона</param>
	/// <param name="rate_min">стоимость минуты разговора</param>
	/// <param name="discount">персональная скидка в процентах</param>
	/// <param name="begin_talk">время начала разговора</param>
	/// <param name="end_talk">время, когда разговор закончился</param>
	Bill(std::string surname, std::string number_tel, double rate_min, double discount, Time& begin_talk, Time& end_talk);
	Bill(const Bill& other);
	~Bill();
	Bill& operator=(const Bill& other);
	void set_surname(std::string value);
	void set_number_tel(std::string value);
	void set_rate_min(double value);
	void set_discount(double value);
	void set_begin_talk(Time& value);
	void set_end_talk(Time& value);
	//void set_amount(double value);
	std::string get_surname();
	std::string get_number_tel();
	double get_rate_min();
	double get_discount();
	Time get_begin_talk();
	Time get_end_talk();
	double get_amount();
	///<summary>
	/// функция, кторая вычисляет сумму к оплате в рублях, результат в amount
	///</summary>
	void money();
	std::string toString();
};
//Bill.cpp
#include "Bill.h"
Bill::Bill() :
	surname(new std::string("0")),
	number_tel(new std::string("0")),
	rate_min(new double(0)),
	discount(new double(0)),
	begin_talk(new Time[1]),
	end_talk(new Time[1]),
	amount(new double(0)) {}


Bill::Bill(std::string surname, std::string number_tel, double rate_min, double discount, Time& begin_talk, Time& end_talk) :
	surname(new std::string(surname)),
	number_tel(new std::string(number_tel)),
	rate_min(new double(rate_min)),
	discount(new double(discount)),
	begin_talk(new Time(begin_talk)),
	end_talk(new Time(end_talk)),
	amount(new double(0)) {}

Bill::Bill(const Bill& other) :
	surname(new std::string(*other.surname)),
	number_tel(new std::string(*other.number_tel)),
	rate_min(new double(*other.rate_min)),
	discount(new double(*other.discount)),
	begin_talk(new Time(*other.begin_talk)),
	end_talk(new Time(*other.end_talk)),
	amount(new double(0)) {}

Bill::~Bill()
{
	delete surname;
	delete number_tel;
	delete rate_min;
	delete discount;
	delete begin_talk;
	delete end_talk;
	delete amount;
}

Bill& Bill::operator=(const Bill& other)
{
	if (this != &other) {
		*surname = *other.surname;
		*number_tel = *other.number_tel;
		*rate_min = *other.rate_min;
		*discount = *other.discount;
		*begin_talk = *other.begin_talk;
		*end_talk = *other.end_talk;
		*amount = *other.amount; 
	}
	return *this;
}

void Bill::set_surname(std::string value)
{
	*surname = value;
}

void Bill::set_number_tel(std::string value)
{
	*number_tel = value;
}

void Bill::set_rate_min(double value)
{
	*rate_min = value;
}

void Bill::set_discount(double value)
{
	*discount = value;
}

void Bill::set_begin_talk(Time& value)
{
	*begin_talk = value;
}

void Bill::set_end_talk(Time& value)
{
	*end_talk = value;
}
//
//void Bill::set_amount(double value)
//{
//	*amount = value;
//}

std::string Bill::get_surname()
{
	return *surname;
}

std::string Bill::get_number_tel()
{
	return *number_tel;
}

double Bill::get_rate_min()
{
	return *rate_min;
}

double Bill::get_discount()
{
	return *discount;
}

Time Bill::get_begin_talk()
{
	return *begin_talk;
}

Time Bill::get_end_talk()
{
	return *end_talk;
}

double Bill::get_amount()
{
	return *amount;
}

void Bill::money()
{
	Time time_talk = *end_talk - *begin_talk;

	int m = time_talk.minu(time_talk);
	double presum = m * 1.0 * *rate_min;
	double sum = presum * (1 - *discount / 100);
	*amount = (sum);
}

std::string Bill::toString()
{
	std::string s = "Сумма к оплате: ";
	s += std::to_string(double(*amount));
	return s;
}
//time.h
#pragma once
#include <iostream>

class Time {
    int* hour;
    int* minute;
    int* second;

public:
    Time();

    /// <summary>
    /// конструктор
    /// </summary>
    /// <param name="hour">часы</param>
    /// <param name="minute">минуты</param>
    /// <param name="second">секунды</param>
    Time(int hour, int minute, int  second);

    /// <summary>
    /// конструктор копирования
    /// </summary>
    /// <param name="other">время</param>
    Time(const Time& other);

    ~Time();

    /// <summary>
    /// Перегруженный оператор присваивания
    /// </summary>
    /// <param name="other">время</param>
    /// <returns>час,минута,секунда</returns>
    Time& operator=(const Time& other);

    /// <summary>
    /// Перегруженный оператор сложения
    /// </summary>
    /// <param name="other">время</param>
    /// <returns>час,минута,секунда</returns>
    Time operator+(const Time& other)const;

    /// <summary>
    /// перегруженный оператор вычитания
    /// </summary>
    /// <param name="other">время</param>
    /// <returns>час,минута,секунда</returns>
    Time operator-(const Time& other)const;

    int minu(const Time& t);

    bool operator==(const Time& other)const;


    bool operator!=(const Time& other)const;


    bool operator<(const Time& other)const;


    bool operator>(const Time& other)const;

    /// <summary>
    /// перегруженная операция ввода
    /// </summary>
    /// <param name="os">поток</param>
    /// <param name="time">время</param>
    /// <returns>час,минута,секунда</returns>
    friend std::ostream& operator<<(std::ostream& os, const Time& time);

    /// <summary>
    /// перегруженная операция вывода
    /// </summary>
    /// <param name="is">поток</param>
    /// <param name="time">время</param>
    /// <returns>час,минута,секунда</returns>
    friend std::istream& operator>>(std::istream& is, Time& time);
};
//time.cpp
#include "time.h"

Time::Time() : hour(new int(0)), minute(new int(0)), second(new int(0)) {}

Time::Time(int hour, int minute, int second) : hour(new int(hour)), minute(new int(minute)), second(new int(second)) {}

Time::Time(const Time& other) : hour(new int(*other.hour)), minute(new int(*other.minute)), second(new int(*other.second)) {}

Time::~Time() {
    delete hour;
    delete minute;
    delete second;
}

Time& Time::operator=(const Time& other) {
    if (this != &other) {
        *hour = *other.hour;
        *minute = *other.minute;
        *second = *other.second;
    }
    return *this;
}

Time Time::operator+(const Time& other) const {
    int sum_hour = *hour + *other.hour;
    int sum_minute = *minute + *other.minute;
    int sum_second = *second + *other.second;
    if (sum_second >= 60) {
        sum_minute += 1;
        sum_second -= 60;
        if (sum_minute >= 60) {
            sum_hour += 1;
            sum_minute -= 60;
        }
    }
    return Time(sum_hour, sum_minute, sum_second);
}

Time Time::operator-(const Time& other) const {
    int totalsec1 = *second + (*minute * 60) + (*hour * 3600);
    int totalsec2 = *other.second + (*other.minute * 60) + (*other.hour * 3600);
    int difff_second = totalsec1 - totalsec2;




    int diff_hour = difff_second / 3600;
    int diff_seconds = difff_second % 3600;
    int diff_minutes = diff_seconds / 60;
    diff_seconds = diff_seconds % 60;


    return Time(diff_hour, diff_minutes, diff_seconds);
}

int Time::minu(const Time& t)
{
    int h = abs(*hour);
    int m = abs(*minute);
    int s = abs(*second);
    int minutes = h * 60 + m;
    if (s > 0) {
        minutes = minutes + 1;
    }
    return minutes;
}


bool Time::operator==(const Time& other) const {
    return (*hour == *other.hour) && (*minute == *other.minute) && (*second == *other.second);
}

bool Time::operator!=(const Time& other) const {
    return !(*this == other);
}

bool Time::operator<(const Time& other) const {
    if (*hour < *other.hour) {
        return true;
    }
    else if (*hour == *other.hour) {
        return *minute < *other.minute;
    }
    else if (*minute == *other.minute) {
        return *second < *other.second;
    }
    return false;
}

bool Time::operator>(const Time& other) const {
    return !(*this < other) && (*this != other);
}

std::ostream& operator<<(std::ostream& os, const Time& time) {
    if ((*time.hour >= 0) && ((*time.second < 0) || (*time.minute < 0))) {
        os << "-" << *time.hour << " часов " << abs(*time.minute) << " минут " << abs(*time.second) << " секунд ";
    }
    if ((*time.hour < 0) && ((*time.second < 0) || (*time.minute < 0))) {
        os << *time.hour << " часов " << abs(*time.minute) << " минут " << abs(*time.second) << " секунд ";
    }
    else {
        os << *time.hour << " часов " << *time.minute << " минут " << *time.second << " секунд ";
    }
    return os;
}

std::istream& operator>>(std::istream& is, Time& time) {

    is >> *time.hour >> *time.minute >> *time.second;
    return is;
}







