//Root.h
class Root {
protected:
	double* roots;
	size_t nRoots;
	double* koef;
	size_t nKoef;
public:
	virtual void get_root_calc() = 0;
	virtual void print() = 0;
	double* getRoots(size_t& nCount) { nCount = nRoots; return roots; }
};
//Linear.h
#pragma once
#include"Root.h"
class Linear:public Root {
	double a;
	double b;
public:
	/// <summary>
	/// конструктор по умолчанию класса Linear
	/// </summary>
	Linear();
	/// <summary>
	/// конструктор класса Linear
	/// </summary>
	/// <param name="a">коэффициент а</param>
	/// <param name="b">коэффициент b</param>
	Linear(double a, double b);
	/// <summary>
	/// деструктор класса Linear
	/// </summary>
	~Linear();
	/// <summary>
	/// метод класса Linear, вычисляющий корень линейного уравнения
	/// </summary>
	void get_root_calc() override;
	/// <summary>
	/// метод класса Linear, реализующий вывод корня линейного уравнения на экран
	/// </summary>
	void print() override;
};
//Linear.cpp
#include "Linear.h"
#include<iostream>

Linear::Linear() :a(0), b(0) {}

Linear::Linear(double a, double b) : a(a), b(b) {}

Linear::~Linear(){}

void Linear::get_root_calc() {
    nRoots = 1;
    if (roots) delete[] roots;
    roots = new double[nRoots];
    roots[0] = -b / a;
    if (a != 0) {
       std::cout << (-b) / a;
    }
    if ((a == 0) && (b == 0)) {
       std:: cout << "Решением данного уравнения является любое число";
    }
    if ((a == 0) && (b != 0)) {
       std:: cout << "Данное уравнение не имеет корней";
    }
}

void Linear::print() {
   std:: cout << "Ответ: " << std::endl;
    get_root_calc();
}
//Square.h
#pragma once
#include "Root.h"
class Square : public Root {
    double a;
    double b;
    double c;
public:
    /// <summary>
    /// конструктор по умолчанию класса Square
    /// </summary>
    Square();
    /// <summary>
    /// конструктор класса Square
    /// </summary>
    /// <param name="a">коэффициент а</param>
    /// <param name="b">коэффициент b</param>
    /// <param name="c">коэффициент c</param>
    Square(double a, double b, double c);
    /// <summary>
    /// деструктор класса Square
    /// </summary>
    ~Square();
    /// <summary>
    /// метод класса Square, вычисляющий корни квадратного уравнения
    /// </summary>
    void get_root_calc() override;
    /// <summary>
    /// метод класса Square, реализующий вывод корней квадратного уравнения на экран
    /// </summary>
    void print() override;
};
//Square.cpp
#include "Square.h"
#include <cmath>
#include <iostream>
Square::Square() : a(0), b(0), c(0) {};

Square::Square(double a, double b, double c) : a(a), b(b), c(c) {};

Square::~Square() {}

void Square::get_root_calc() {
    if ((a != 0) && (b != 0) && (c == 0)) {
        double x1 = 0;
        std::cout << x1;
        std::cout << std::endl;
        double x2 = (-b / a);
        std::cout << x2;
    }
    if ((a != 0) && (b == 0) && (c == 0)) {
        double x = 0;
        std::cout << x;
    }
    if ((a != 0) && (b == 0) && (c != 0)) {
        if ((-c) / a > 0) {
            double x1 = -(sqrt((-c) / a > 0));
            std::cout << x1;
            std::cout << std::endl;
            double x2 = sqrt((-c) / a > 0);
            std::cout << x2;
        }
        else {
            std::cout << "Hет корней";
        }
    }
    if ((a == 0) && (b == 0) && (c != 0)) {
        std::cout << "Hет корней";
    }
    if ((a != 0) && (b != 0) && (c != 0)) {
        double D = b * b - 4 * a * c;
        if (D < 0) {
            std::cout << "Hет корней";
        }
        if (D > 0) {
            double x1 = (((-b) + sqrt(D)) / (2 * a));
            std::cout << x1;
            std::cout << std::endl;
            double x2 = (((-b) - sqrt(D)) / (2 * a));
            std::cout << x2;
        }
        if (D == 0) {
            double x = (-b) / 2 * a;
            std::cout << x;
        }
    }
    if ((a == 0) && (b != 0) && (c != 0)) {
        std::cout << (-c) / b;
    }
    else {
        std::cout << "Х - любое число";
    }
}
void Square::print() {
    std::cout << "Ответ: " << std::endl;
    get_root_calc();
}

